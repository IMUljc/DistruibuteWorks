<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">
    
 
    
    <!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->
    <context:component-scan base-package="controller"/>
    <context:component-scan base-package="dao"/>
    <context:component-scan base-package="service"/>
    
    
		 <!-- hibernate 配置数据源   -->
     <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"  >  
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>  
        <property name="url" value="jdbc:mysql://localhost:3306/javaworks?useUnicode=true&amp;characterEncoding=UTF-8"></property>  
        <property name="username" value="root"></property>  
        <property name="password" value="1234"></property>  
        
    </bean>      
		
		
		
	<!-- 第一步 配置 hibernate SessionFactory -->  
   <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <property name="hibernateProperties">  
            <props>  
               
            <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>  
                <prop key="javax.persistence.validation.mode">none</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>  
                <prop key="hibernate.show_sql">true</prop>  
                <prop key="hibernate.format_sql">true</prop>  
                <prop key="current_session_context_class">thread</prop>
                 
 
<prop key="hibernate.connection.username">root</prop>  
<prop key="hibernate.connection.password">1234</prop>  
<prop key="hibernate.connection.url">jdbc:mysql://javaworks?useUnicode=true&amp;characterEncoding=UTF-8</prop>  
<prop key="hibernate.default_batch_fetch_size">30
</prop>  
                

</props>  
         
        </property>
            
        <property name="annotatedClasses">  
            <!-- 使用注释 -->
            <list>  
                <value>domain.User</value>
                <value>domain.MLcheck</value>
            </list>  
        </property>  
        
        <!-- <property name="configLocations">  
            <list>  
                <value>  
                读取和实体相关的xml  
                    classpath:/config/hibernate.cfg.xml  
                </value>  
            </list> 
        </property>   -->
    </bean>  
		

	 <bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"></property>
        </bean>
	
	 <!-- <hibernate配置事物，流程：先配置sessionfactory，再配置 事物管理器，然後配置事物的規則，最後配置事物的入口> -->
    <!-- 第二步 配置Hibernate事务管理器 -->
   <bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    
    
    <!-- 配置事务异常封装 -->
    <bean id="persistenceExceptionTranslationPostProcessor"
        class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
    
    <!--  开启通过注解@transation
  <tx:annotation-driven transaction-manager="transactionManager" /> -->
    
    
    <!-- 第三步配置事务规则 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        
        <tx:attributes >
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>  
    <!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
    <aop:config >
		<aop:pointcut id="serviceMethod"
			expression=" execution(* service.*.*(..))" />
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
    </aop:config>
    
    
    
   
    </beans> 
